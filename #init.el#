'melpa
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

(require 'use-package)

; (use-package evil
             ; :demand)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (dracula)))
 '(custom-safe-themes
   (quote
    ("ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" default)))
 '(package-selected-packages
   (quote
    (org-babel-eval-in-repl avy nlinum-relative evil which-key use-package dracula-theme helm))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;disable top bar
; (menu-bar-mode -1)
; (tool-bar-mode -1)

;;(use-package general :ensure t)

; (use-package general :ensure t
;              :config
;              (general-define-key "C-'" 'avy-goto-word-1)
;              )

(global-nlinum-relative-mode)

(global-set-key (kbd "C-:") 'avy-goto-char)

;; load org-mode for org-babel
(use-package org
             :ensure t)

; (org-babel-load-file
;   (expand-file-name "config.el.org"
;                     user-emacs-directory))

(require 'org)
(org-babel-load-file
  (expand-file-name "config.el.org"
                    user-emacs-directory))


; (require 'org)
; ;; Open the configuration
; (find-file (concat user-emacs-directory "config.el.org"))
; ;; tangle it
; (org-babel-tangle)
; ;; load it
; (load-file (concat user-emacs-directory "init.el"))
; ;; finally byte-compile it
; (byte-compile-file (concat user-emacs-directory "init.el"))

;;(org-babel-load-file (concat user-emacs-directory "config.el.org"))
