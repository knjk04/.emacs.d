* Packages
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

** aggressive-indent
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'css-mode-hook #'aggressive-indent-mode)

;;activate for programming modes
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode) 
#+END_SRC
   
** anzu
#+BEGIN_SRC emacs-lisp
(global-anzu-mode +1)
#+END_SRC

** auto-complete 
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :config
  (ac-config-default)
  (global-auto-complete-mode)) 
#+END_SRC
   
** column enforce mode
subtly tells you which characters infringe upon the 80 char limit
#+BEGIN_SRC emacs-lisp
(use-package column-enforce-mode
  :ensure t
  :diminish column-enforce-mode
  :init
  (setq column-enforce-column 99)
  :config
  (progn
    (add-hook 'prog-mode-hook 'column-enforce-mode)))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
(defun red/dashboard-banner ()
       """Set a dashboard banner including information on package init time and garbage collections."""
       (setq dashboard-banner-logo-title
             (format "Emacs ready in %.2f seconds with %d garbage collections."
                     (float-time (time-subtract after-init-time before-init-time)) gcs-done)))

     (use-package dashboard
       :ensure t
       :init
       (add-hook 'after-init-hook 'dashboard-refresh-buffer)
       (add-hook 'dashboard-mode-hook 'red/dashboard-banner)
       :config
       (dashboard-setup-startup-hook)
       ;;(setq dashboard-banner-logo-title "If Brute force doesn't solve your problem, You aren't using enough")
       (setq dashboard-startup-banner "~/.emacs.d/logo_small.png")


       (defun dashboard-insert-space ()
         (insert ""))

       (setq dashboard-items '((recents . 10)
                               ;;(projects . 5)
                               ;;(agenda . 5)
                               ))
       (dashboard-setup-startup-hook))


;(use-package dashboard
;    :config
;    (dashboard-setup-startup-hook))
#+END_SRC

** avy 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'avy-goto-char)
#+END_SRC

** edit-server.el
   edit with emacs (chrome extension)
#+BEGIN_SRC emacs-lisp
;(add-to-list 'load-path "~/.emacs.d/.lisp/")
;(require 'edit-server)
;(edit-server-start)
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
;(use-package evil
;  :ensure t
;  :config
;  ;; Make Evil's point behave more like Emacs'
;  (setq evil-want-change-word-to-end nil)
;  (setq evil-move-cursor-back nil)
;  (evil-mode))
 #+END_SRC
   
** evil commentary
#+BEGIN_SRC emacs-lisp
;(evil-commentary-mode)
#+END_SRC
   
** evil surround
Usage (spaces for clarity): c s [object to change from - e.g. ')'] [object to change to - e.g. '}']
E.g. cs)]
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** exwm
#+BEGIN_SRC emacs-lisp
  ;(use-package exwm
  ;:ensure t
  ;:config
  ;(require 'exwm-config)
  ;(exwm-config-default)


    ;; Set the initial workspace number.
   ; (setq exwm-workspace-number 0)
    ;; Make class name the buffer name
    ;(add-hook 'exwm-update-class-hook
     ;         (lambda ()
      ;          (exwm-workspace-rename-buffer exwm-class-name)))

    ;; Don't use evil-mode in exwm buffers
  ;  (add-to-list 'evil-emacs-state-modes 'exwm-mode)

    ;; 's-w': Switch workspace
  ;  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    ;; 's-N': Switch to certain workspace
  ;  (dotimes (i 10)
  ;    (exwm-input-set-key (kbd (format "s-%d" i))
   ;                       `(lambda ()
    ;                         (interactive)
     ;                        (exwm-workspace-switch-create ,i))))
    ;; 's-r': Launch application
  ;  (exwm-input-set-key (kbd "s-r")
   ;                     (lambda (command)
;			  (interactive (list (read-shell-command "$ "))) 
;			  (start-process-shell-command command nil command)))

    ;; Better window management
 ;   (exwm-input-set-key (kbd "s-h") 'windmove-left)
  ;  (exwm-input-set-key (kbd "s-j") 'windmove-down)
   ; (exwm-input-set-key (kbd "s-k") 'windmove-up)
;    (exwm-input-set-key (kbd "s-l") 'windmove-right)

;    (exwm-input-set-key (kbd "s-s") 'split-window-right)
;    (exwm-input-set-key (kbd "s-v") 'split-window-vertically)

;    (advice-add 'split-window-right :after 'windmove-right)
;    (advice-add 'split-window-vertically :after 'windmove-down)

;    (exwm-input-set-key (kbd "s-d") 'delete-window)
;    (exwm-input-set-key (kbd "s-q") '(lambda ()
;				       (interactive)
;				       (kill-buffer (current-buffer))))

    ;; Save my hands
;    (exwm-input-set-key (kbd "s-f") 'find-file)
;    (exwm-input-set-key (kbd "s-b") 'ido-switch-buffer)

;    (exwm-input-set-key (kbd "s-w") 'save-buffer)

    ;; Swap between qwerty and Dvorak with the same keyboard key
;    (exwm-input-set-key (kbd "s-;") '(lambda ()
;				       (interactive)
;				       (start-process-shell-command "aoeu" nil "aoeu")
;				       (message "Qwerty")))
;    (exwm-input-set-key (kbd "s-z") '(lambda ()
;				       (interactive)
;				       (start-process-shell-command "asdf" nil "asdf")
;				       (message "Dvorak")))

    ;; Line-editing shortcuts
;    (exwm-input-set-simulation-keys
;     '(([?\C-b] . left)
;       ([?\C-f] . right)
;       ([?\M-f] . C-right)
;       ([?\M-b] . C-left)
;       ([?\C-y] . S-insert)
;       ([?\C-p] . up)
;       ([?\C-n] . down)
;       ([?\C-a] . home)
;       ([?\C-e] . end)
;       ([?\M-v] . prior)
;       ([?\C-v] . next)
;       ([?\C-d] . delete)
;       ([?\C-k] . (S-end delete))))
    ;; Configure Ido
;    (exwm-config-ido)
    ;; Other configurations
;    (exwm-config-misc)

    ;; Allow switching buffers between workspaces
;    (setq exwm-workspace-show-all-buffers t)
;    (setq exwm-layout-show-all-buffers t)

  ;; enable systemtray
;  (require 'exwm-systemtray)
;  (exwm-systemtray-enable))

#+END_SRC
** eyebrowse
#+BEGIN_SRC emacs-lisp
(eyebrowse-mode t)
#+END_SRC
   
** fancy-battery
Doesn't show battery percentage, only time remaining
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-init-hook #'fancy-battery-mode)
#+END_SRC

** guide-key
#+BEGIN_SRC emacs-lisp
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
(guide-key-mode 1)  ; Enable guide-key-mode
#+END_SRC
   
** helm
Bound SPC f to helm-find-files, and SPC r to helm-recentf - spacemacs style!
#+BEGIN_SRC emacs-lisp
(use-package helm
:bind (:map evil-normal-state-map
;using ido instead for find-files
("SPC f" . ido-find-file) ;; this should be in the ido section
))
;("SPC r" . helm-recentf)))
(require 'helm-config)
#+END_SRC

** hlinum-mode
Doesn't work   
#+BEGIN_SRC emacs-lisp
;(require 'hlinum)
;(hlinum-activate)
#+END_SRC
   
** ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
;("SPC f" . ido-find-file)
#+END_SRC

** ido vertical   
#+BEGIN_SRC emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** intero
#+BEGIN_SRC emacs-lisp
(package-install 'intero)
(add-hook 'haskell-mode-hook 'intero-mode)
#+END_SRC
   
** multiple cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
;;for when there is an active region that goes across multiple lines, the below adds a cursor to every line
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;;when I want to add multiple cursors that are not on continuous lines, but rather based on keywords in the buffer
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** modeline
#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :ensure t
  :config
  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
        telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left)
  (setq telephone-line-height 30
        telephone-line-evil-use-short-tag t)
  (telephone-line-mode 1)
  )

(setq battery-mode-line-format "  %p%% %t  ")
(setq display-time-default-load-average nil)
(display-battery-mode 1)
(display-time-mode 1)
#+END_SRC

** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind* (("M-m SPC n". neotree-toggle))
  :init
  (setq neo-smart-open t))

;; which key modal explanation - taken from sriramkswamy
(which-key-add-key-based-replacements
  "SPC n" "directory tree")
#+END_SRC
   
** org
source code highlighting
#+BEGIN_SRC emacs-lisp
;(setq org-src-fontify-natively t
;      org-src-tab-acts-natively t)
#+END_SRC

Restrict image width
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width '(300))
#+END_SRC

** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :ensure t
 :init
 (setq org-bullets-bullet-list
  '("◉" "◎" "￼" "○" "►" "◇"))
 :config
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
 
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :height 0.9))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.8))))
)
#+END_SRC

** org-ioslide
Doesn't work
#+BEGIN_SRC emacs-lisp
(require 'ox-ioslide)
#+END_SRC

** ox-twbs
org to twitter bootstrap
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(("org-notes"
         :base-directory "~/org/"
         :publishing-directory "~/public_html/"
         :publishing-function org-twbs-publish-to-html
         :with-sub-superscript nil
	 )))
#+END_SRC
   
** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (add-hook 'evil-cleverparens-mode-hook #'enable-paredit-mode))
(add-hook 'prog-mode-hook #'paredit-mode)
#+END_SRC
   
** powerline-evil
#+BEGIN_SRC emacs-lisp
;(require 'powerline-evil)
#+END_SRC
   
** rainbow-delimeters
#+BEGIN_SRC emacs-lisp
;;start the mode automatically in most programming modes (requires Emacs 24+)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
   
** restart emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t
  :bind* (("C-x M-c" . restart-emacs)))
#+END_SRC

** shrink white space
#+BEGIN_SRC emacs-lisp
(use-package shrink-whitespace
  :ensure t
  :bind* (("M-m g SPC" . shrink-whitespace)))
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
;;M-x smartparens-mode to toggle
;;M-x sp-cheat-sheet shows available commands + usage examples
(require 'smartparens-config)
#+END_SRC

** smex
   M-x autocompletion using Ido
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :bind
  (("M-x" . smex)))
#+END_SRC
   
** smart-mode-line
#+BEGIN_SRC emacs-lisp
;(sml/setup)
#+END_SRC

** solaire mode
#+BEGIN_SRC emacs-lisp
(require 'solaire-mode)

;; brighten buffers (that represent real files)
(add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
;; To enable solaire-mode unconditionally for certain modes:
(add-hook 'ediff-prepare-buffer-hook #'solaire-mode)

;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
;; itself off every time Emacs reverts the file
(add-hook 'after-revert-hook #'turn-on-solaire-mode)

;; highlight the minibuffer when it is activated:
(add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)

;; if the bright and dark background colors are the wrong way around, use this
;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
;; This should be used *after* you load the active theme!
;;
;; NOTE: This is necessary for themes in the doom-themes package!
(solaire-mode-swap-bg)
#+END_SRC

** web mode
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** writegood
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "path/to/writegood-mode")
(require 'writegood-mode)
(global-set-key "\C-cg" 'writegood-mode)
#+END_SRC

** wttrin.el (weather package)
#+BEGIN_SRC emacs-lisp
;; weather from wttr.in
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-accept-language '("Accept-Language" . "en-GB"))
  (setq wttrin-default-cities '("Nottingham"
                                "London")))
#+END_SRC
   

* Productivity
** company 
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** flyspell for comments in source code
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook
          (lambda ()
            (flyspell-prog-mode)
            ; ...
          ))
#+END_SRC
   
** ido recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to find a recent file."
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(global-nlinum-relative-mode)
#+END_SRC

** Quickly access (this) config file (not yet functioning)
#+BEGIN_SRC emacs-lisp
;(defun find-user-init-file ()
;  "Edit the `user-init-file', in another window."
;  (interactive)
;  (find-file-other-window user-init-file))
;(global-set-key (kbd "C-c I") 'find-user-init-file)

;;(defun init-file ()
;;(if (eq system-type 'windows-nt)
#+END_SRC

** Time in modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
;(setq display-time-format "%I:%M:%S")
#+END_SRC
   
** warn before closing emacs
   Definitely deserving its place under productivity. Why would I want to close emacs?!
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** 'yes' or 'no' -> 'y' or 'n'
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Miscellaneous 
** attempt to autocomplete with tab
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** disable menubars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** disable scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

   
** font
#+BEGIN_SRC emacs-lisp
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :family "Source Code Pro for Powerline"))))
#+END_SRC

** for emacsclient
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

** hide modeline
#+BEGIN_SRC emacs-lisp
;(defvar-local hidden-mode-line-mode nil)
;
;(define-minor-mode hidden-mode-line-mode
;  "Minor mode to hide the mode-line in the current buffer."
;  :init-value nil
;  :global t
;  :variable hidden-mode-line-mode
;  :group 'editing-basics
;  (if hidden-mode-line-mode
;      (setq hide-mode-line mode-line-format
;            mode-line-format nil)
;    (setq mode-line-format hide-mode-line
;          hide-mode-line nil))
;  (force-mode-line-update)
;  ;; Apparently force-mode-line-update is not always enough to
;  ;; redisplay the mode-line
;  (redraw-display)
;  (when (and (called-interactively-p 'interactive)
;             hidden-mode-line-mode)
;    (run-with-idle-timer
;     0 nil 'message
;     (concat "Hidden Mode Line Mode enabled.  "
;             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
;
;;; If you want to hide the mode-line in every buffer by default
;(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
#+END_SRC


** line number column width
#+BEGIN_SRC emacs-lisp
(setq nlinum-format " %d")
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
#+END_SRC

** Match parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC

** ranger, not dired
#+BEGIN_SRC emacs-lisp
(ranger-override-dired-mode t)
#+END_SRC

** recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'ido-recentf-open)
#+END_SRC

** recents
#+BEGIN_SRC emacs-lisp
;(recentf-mode 1)
;(setq recentf-max-menu-items 25)
;(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

** core modeline
   From https://github.com/hlissner/doom-emacs/tree/master/modules/ui/doom-modeline
#+BEGIN_SRC emacs-lisp
   ;;; core-modeline.el

;; This file tries to be an almost self-contained configuration of my mode-line.
;;
;; It depends on the following external packages:
;;   + REQUIRED
;;       + powerline
;;       + evil-mode
;;       + projectile
;;       + DejaVu Mono for Powerline font <https://github.com/powerline/fonts>
;;   + OPTIONAL
;;       + anzu
;;       + iedit and evil-multiedit
;;       + flycheck
;;
;; The only external functions used are:
;;  `doom-fix-unicode'  in core/core-defuns.el
;;  `doom/project-root' in core/defuns/defuns-projectile.el
;;
;; Both are simple, isolated functions and, besides projectile, has no other
;; dependencies.
;(require 's)
;(require 'f)
;
;(defvar mode-line-height 30
;  "How tall the mode-line should be. This is only respected in GUI emacs.")
;
;;; Load powerline only when uncompiled, in order to generate the xpm bitmaps for
;;; the mode-line. This is the tall blue bar on the left of the mode-line.
;;; NOTE Compile this file for a faster startup!
;(eval-when-compile (require 'powerline))
;
;(defun doom/project-root (&optional strict-p)
;  "Get the path to the root of your project."
;  (let (projectile-require-project-root strict-p)
;    (projectile-project-root)))
;
;;; FIXME Don't hardcode colors in
;(defvar mode-line-bar          (pl/percent-xpm mode-line-height 100 0 100 0 3 "#00B3EF" nil))
;(defvar mode-line-eldoc-bar    (pl/percent-xpm mode-line-height 100 0 100 0 3 "#B3EF00" nil))
;(defvar mode-line-inactive-bar (pl/percent-xpm mode-line-height 100 0 100 0 3 nil nil))
;
;;; Custom faces
;(defface mode-line-is-modified nil
;  "Face for mode-line modified symbol")
;
;(defface mode-line-2 nil
;  "The alternate color for mode-line text.")
;
;(defface mode-line-highlight nil
;  "Face for bright segments of the mode-line.")
;
;(defface mode-line-count-face nil
;  "Face for anzu/evil-substitute/evil-search number-of-matches display.")
;
;;; Git/VCS segment faces
;(defface mode-line-vcs-info '((t (:inherit warning)))
;  "")
;(defface mode-line-vcs-warning '((t (:inherit warning)))
;  "")
;
;;; Flycheck segment faces
;(defface doom-flycheck-error '((t (:inherit error)))
;  "Face for flycheck error feedback in the modeline.")
;(defface doom-flycheck-warning '((t (:inherit warning)))
;  "Face for flycheck warning feedback in the modeline.")
;
;
;;;
;;; Functions
;;;
;
;(defun doom-ml-flycheck-count (state)
;  "Return flycheck information for the given error type STATE."
;  (when (flycheck-has-current-errors-p state)
;    (if (eq 'running flycheck-last-status-change)
;        "?"
;      (cdr-safe (assq state (flycheck-count-errors flycheck-current-errors))))))
;
;;; pyenv/rbenv version segment
;(defvar doom-ml-env-version-hook '()
;  "Hook that runs whenever the environment version changes (e.g. rbenv/pyenv)")
;
;(defun doom-ml|env-update ()
;  (when doom-ml--env-command
;    (let ((default-directory (doom/project-root)))
;      (let ((s (shell-command-to-string doom-ml--env-command)))
;        (setq doom-ml--env-version (if (string-match "[ \t\n\r]+\\'" s)
;                                    (replace-match "" t t s)
;                                  s))
;        (run-hook-with-args 'doom-ml-env-version-hook doom-ml--env-version)))))
;
;(defmacro def-version-cmd! (modes command)
;  "Define a COMMAND for MODE that will set `doom-ml--env-command' when that mode is
;activated, which should return the version number of the current environment. It is used
;by `doom-ml|env-update' to display a version number in the modeline. For instance:
;
;  (def-version-cmd! ruby-mode \"ruby --version | cut -d' ' -f2\")
;
;This will display the ruby version in the modeline in ruby-mode buffers. It is cached the
;first time."
;  (add-hook! (focus-in find-file) 'doom-ml|env-update)
;  `(add-hook! ,modes (setq doom-ml--env-command ,command)))
;
;
;;;
;;; Initialization
;;;
;
;;; Where (py|rb)env version strings will be stored
;(defvar-local doom-ml--env-version nil)
;(defvar-local doom-ml--env-command nil)
;
;(defun doom-fix-unicode (font &rest chars)
;  "Display certain unicode characters in a specific font.
;
;e.g. (doom-fix-unicode \"DejaVu Sans\" ?⚠ ?★ ?λ)"
;  (declare (indent 1))
;  (mapc (lambda (x) (set-fontset-font
;                t (cons x x)
;                (cond ((fontp font)
;                       font)
;                      ((listp font)
;                       (font-spec :family (car font) :size (nth 1 font)))
;                      ((stringp font)
;                       (font-spec :family font))
;                      (t (error "FONT is an invalid type: %s" font)))))
;        chars))
;;; Make certain unicode glyphs bigger for the mode-line.
;;; FIXME Replace with all-the-icons?
;(doom-fix-unicode '("DejaVu Sans Mono" 15) ?✱) ;; modified symbol
;(let ((font "DejaVu Sans Mono for Powerline"))
;  (doom-fix-unicode (list font 12) ?)  ;; git symbol
;  (doom-fix-unicode (list font 16) ?∄)  ;; non-existent-file symbol
;  (doom-fix-unicode (list font 15) ?)) ;; read-only symbol
;
;;; So the mode-line can keep track of "the current window"
;(defvar mode-line-selected-window nil)
;(defun doom|set-selected-window (&rest _)
;  (let ((window (frame-selected-window)))
;    (unless (minibuffer-window-active-p window)
;      (setq mode-line-selected-window window))))
;(add-hook 'window-configuration-change-hook #'doom|set-selected-window)
;(add-hook 'focus-in-hook #'doom|set-selected-window)
;(advice-add 'select-window :after 'doom|set-selected-window)
;(advice-add 'select-frame  :after 'doom|set-selected-window)
;
;
;;;
;;; Mode-line segments
;;;
;
;(defun *buffer-path ()
;  "Displays the buffer's full path relative to the project root (includes the
;project root). Excludes the file basename. See `*buffer-name' for that."
;  (when buffer-file-name
;    (propertize
;     (f-dirname
;      (let ((buffer-path (file-relative-name buffer-file-name (doom/project-root)))
;            (max-length (truncate (/ (window-body-width) 1.75))))
;        (concat (projectile-project-name) "/"
;                (if (> (length buffer-path) max-length)
;                    (let ((path (reverse (split-string buffer-path "/" t)))
;                          (output ""))
;                      (when (and path (equal "" (car path)))
;                        (setq path (cdr path)))
;                      (while (and path (<= (length output) (- max-length 4)))
;                        (setq output (concat (car path) "/" output))
;                        (setq path (cdr path)))
;                      (when path
;                        (setq output (concat "../" output)))
;                      (when (string-suffix-p "/" output)
;                        (setq output (substring output 0 -1)))
;                      output)
;                  buffer-path))))
;     'face (if active 'mode-line-2))))
;
;(defun *buffer-name ()
;  "The buffer's base name or id."
;  ;; FIXME Don't show uniquify tags
;  (s-trim-left (format-mode-line "%b")))
;
;(defun *buffer-pwd ()
;  "Displays `default-directory', for special buffers like the scratch buffer."
;  (propertize
;   (concat "[" (abbreviate-file-name default-directory) "]")
;   'face 'mode-line-2))
;
;(defun *buffer-state ()
;  "Displays symbols representing the buffer's state
;(non-existent/modified/read-only)"
;  (when buffer-file-name
;    (propertize
;     (concat (if (not (file-exists-p buffer-file-name))
;                 "∄"
;               (if (buffer-modified-p) "✱"))
;             (if buffer-read-only ""))
;     'face 'mode-line-is-modified)))
;
;(defun *buffer-encoding-abbrev ()
;  "The line ending convention used in the buffer."
;  (if (memq buffer-file-coding-system '(utf-8 utf-8-unix))
;      ""
;    (symbol-name buffer-file-coding-system)))
;
;(defun *major-mode ()
;  "The major mode, including process, environment and text-scale info."
;  (concat (format-mode-line mode-name)
;          (if (stringp mode-line-process) mode-line-process)
;          (if doom-ml--env-version (concat " " doom-ml--env-version))
;          (and (featurep 'face-remap)
;               (/= text-scale-mode-amount 0)
;               (format " (%+d)" text-scale-mode-amount))))
;
;(defun *vc ()
;  "Displays the current branch, colored based on its state."
;  (when vc-mode
;    (let ((backend (concat " " (substring vc-mode (+ 2 (length (symbol-name (vc-backend buffer-file-name)))))))
;          (face (let ((state (vc-state buffer-file-name)))
;                  (cond ((memq state '(edited added))
;                         'mode-line-vcs-info)
;                        ((memq state '(removed needs-merge needs-update conflict removed unregistered))
;                         'mode-line-vcs-warning)))))
;      (if active
;          (propertize backend 'face face)
;        backend))))
;
;(defvar-local doom--flycheck-err-cache nil "")
;(defvar-local doom--flycheck-cache nil "")
;(defun *flycheck ()
;  "Persistent and cached flycheck indicators in the mode-line."
;  (when (and (featurep 'flycheck)
;             flycheck-mode
;             (or flycheck-current-errors
;                 (eq 'running flycheck-last-status-change)))
;    (or (and (or (eq doom--flycheck-err-cache doom--flycheck-cache)
;                 (memq flycheck-last-status-change '(running not-checked)))
;             doom--flycheck-cache)
;        (and (setq doom--flycheck-err-cache flycheck-current-errors)
;             (setq doom--flycheck-cache
;                   (let ((fe (doom-ml-flycheck-count 'error))
;                         (fw (doom-ml-flycheck-count 'warning)))
;                     (concat
;                      (if fe (propertize (format " •%d " fe)
;                                         'face (if active
;                                                   'doom-flycheck-error
;                                                 'mode-line)))
;                      (if fw (propertize (format " •%d " fw)
;                                         'face (if active
;                                                   'doom-flycheck-warning
;                                                 'mode-line))))))))))
;
;(defun column-number-at-pos (pos)
;  (save-excursion
;    (goto-char pos)
;    (current-column)))
;
;(defun *selection-info ()
;  "Information about the current selection, such as how many characters and
;lines are selected, or the NxM dimensions of a block selection."
;  (when (region-active-p)
;    (propertize
;     (let ((reg-beg (region-beginning))
;           (reg-end (region-end)))
;       (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max))))
;             (chars (- (1+ reg-end) reg-beg))
;             (cols (1+ (abs (- (column-number-at-pos reg-end)
;                               (column-number-at-pos reg-beg))))))
;         (cond
;          ;; rectangle selection
;          ((bound-and-true-p rectangle-mark-mode)
;           (format " %dx%dB " lines (1- cols)))
;          ;; line selection
;          ((> lines 1)
;           (format " %dC %dL " chars lines))
;          (t (format " %dC " (1- chars))))))
;     'face 'mode-line-highlight)))
;
;(make-variable-buffer-local 'anzu--state)
;(defun *anzu ()
;  "Show the current match number and the total number of matches. Requires anzu
;to be enabled."
;  (when (and (featurep 'evil-anzu) (evil-ex-hl-active-p 'evil-ex-search))
;    (propertize
;     (format " %s/%d%s "
;             anzu--current-position anzu--total-matched
;             (if anzu--overflow-p "+" ""))
;     'face (if active 'mode-line-count-face))))
;
;(defun *iedit ()
;  "Show the number of iedit regions matches + what match you're on."
;  (when (and (boundp 'iedit-mode) iedit-mode)
;    (propertize
;     (let ((this-oc (let (message-log-max) (iedit-find-current-occurrence-overlay)))
;           (length (or (ignore-errors (length iedit-occurrences-overlays)) 0)))
;       (format
;        " %s/%s "
;        (save-excursion
;          (unless this-oc
;            (iedit-prev-occurrence)
;            (setq this-oc (iedit-find-current-occurrence-overlay)))
;          (if this-oc
;              ;; NOTE: Not terribly reliable
;              (- length (-elem-index this-oc iedit-occurrences-overlays))
;            "-"))
;        length))
;     'face (if active 'mode-line-count-face))))
;
;(defun *buffer-position ()
;  "A more vim-like buffer position."
;  (let ((start (window-start))
;        (end (window-end))
;        (pend (point-max)))
;    (cond ((equal mode-name "PDFView") (format ":P%d/%d" (pdf-view-current-page) (pdf-cache-number-of-pages)))
;          ((and (= start 1) (= end pend)) ":All")
;          ((= start 1) ":Top")
;          ((= end pend) ":Bot")
;          (t (format ":%d%%%%" (/ end 0.01 pend))))))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;(defun doom-mode-line (&optional id)
;  `(:eval
;    (let* ((active (eq (selected-window) mode-line-selected-window))
;           (lhs (list (propertize " " 'display (if active mode-line-bar mode-line-inactive-bar))
;                      (*flycheck)
;                      (*selection-info)
;                      ;; (*anzu)
;                      ;; (*iedit)
;                      " "
;                      (*buffer-path)
;                      (*buffer-name)
;                      " "
;                      (*buffer-state)
;                      ,(if (eq id 'scratch) '(*buffer-pwd))))
;           (rhs (list (*buffer-encoding-abbrev)
;                      (*vc)
;                      "  " (*major-mode) "  "
;                      (propertize
;                       (concat "(%l,%c) " (*buffer-position))
;                       'face (if active 'mode-line-2))))
;           (middle (propertize
;                    " " 'display `((space :align-to (- (+ right right-fringe right-margin)
;                                                       ,(1+ (string-width (format-mode-line rhs)))))))))
;      (list lhs middle rhs))))
;
;(setq-default mode-line-format (doom-mode-line))
;
;(provide 'doom-modeline)
;;; core-modeline.el ends here
#+END_SRC

** doom modeline
#+BEGIN_SRC emacs-lisp
   ;;; ui/doom-modeline/config.el -*- lexical-binding: t; -*-

;(use-package eldoc-eval
;  :config
;  (defun +doom-modeline-eldoc (text)
;    (concat (when (display-graphic-p)
;              (+doom-modeline--make-xpm
;               (face-background 'doom-modeline-eldoc-bar nil t)
;               +doom-modeline-height
;               +doom-modeline-bar-width))
;            text))
;
;  ;; Show eldoc in the mode-line with `eval-expression'
;  (defun +doom-modeline--show-eldoc (input)
;    "Display string STR in the mode-line next to minibuffer."
;    (with-current-buffer (eldoc-current-buffer)
;      (let* ((str              (and (stringp input) input))
;             (mode-line-format (or (and str (or (+doom-modeline-eldoc str) str))
;                                   mode-line-format))
;             mode-line-in-non-selected-windows)
;        (force-mode-line-update)
;        (sit-for eldoc-show-in-mode-line-delay))))
;  (setq eldoc-in-minibuffer-show-fn #'+doom-modeline--show-eldoc)
;
;  (eldoc-in-minibuffer-mode +1))
;
;;; anzu and evil-anzu expose current/total state that can be displayed in the
;;; mode-line.
;(use-package evil-anzu
;  :requires evil
;  :init
;  (add-transient-hook! #'evil-ex-start-search (require 'evil-anzu))
;  (add-transient-hook! #'evil-ex-start-word-search (require 'evil-anzu))
;  :config
;  (setq anzu-cons-mode-line-p nil
;        anzu-minimum-input-length 1
;        anzu-search-threshold 250)
;  ;; Avoid anzu conflicts across buffers
;  (mapc #'make-variable-buffer-local
;        '(anzu--total-matched anzu--current-position anzu--state
;          anzu--cached-count anzu--cached-positions anzu--last-command
;          anzu--last-isearch-string anzu--overflow-p))
;  ;; Ensure anzu state is cleared when searches & iedit are done
;  (add-hook 'isearch-mode-end-hook #'anzu--reset-status t)
;  (add-hook '+evil-esc-hook #'anzu--reset-status t)
;  (add-hook 'iedit-mode-end-hook #'anzu--reset-status))
;
;
;;; Keep `+doom-modeline-current-window' up-to-date
;(defvar +doom-modeline-current-window (frame-selected-window))
;(defun +doom-modeline|set-selected-window (&rest _)
;  "Sets `+doom-modeline-current-window' appropriately"
;  (when-let* ((win (frame-selected-window)))
;    (unless (minibuffer-window-active-p win)
;      (setq +doom-modeline-current-window win))))
;
;(add-hook 'window-configuration-change-hook #'+doom-modeline|set-selected-window)
;(add-hook 'focus-in-hook #'+doom-modeline|set-selected-window)
;(advice-add #'handle-switch-frame :after #'+doom-modeline|set-selected-window)
;(advice-add #'select-window :after #'+doom-modeline|set-selected-window)
;
;;; fish-style modeline
;(use-package shrink-path
;  :commands (shrink-path-prompt shrink-path-file-mixed))
;
;
;;;
;;; Variables
;;;
;
;(defvar +doom-modeline-height 29
;  "How tall the mode-line should be (only respected in GUI emacs).")
;
;(defvar +doom-modeline-bar-width 3
;  "How wide the mode-line bar should be (only respected in GUI emacs).")
;
;(defvar +doom-modeline-vspc
;  (propertize " " 'face 'variable-pitch)
;  "TODO")
;
;(defvar +doom-modeline-buffer-file-name-style 'truncate-upto-project
;  "Determines the style used by `+doom-modeline-buffer-file-name'.
;
;Given ~/Projects/FOSS/emacs/lisp/comint.el
;truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;truncate-upto-root => ~/P/F/e/lisp/comint.el
;truncate-all => ~/P/F/e/l/comint.el
;relative-from-project => emacs/lisp/comint.el
;relative-to-project => lisp/comint.el
;file-name => comint.el")
;
;;; externs
;(defvar anzu--state nil)
;(defvar evil-mode nil)
;(defvar evil-state nil)
;(defvar evil-visual-selection nil)
;(defvar iedit-mode nil)
;(defvar all-the-icons-scale-factor)
;(defvar all-the-icons-default-adjust)
;
;
;;;
;;; Custom faces
;;;
;
;(defgroup +doom-modeline nil
;  ""
;  :group 'doom)
;
;(defface doom-modeline-buffer-path
;  '((t (:inherit (mode-line-emphasis bold))))
;  "Face used for the dirname part of the buffer path."
;  :group '+doom-modeline)
;
;(defface doom-modeline-buffer-file
;  '((t (:inherit (mode-line-buffer-id bold))))
;  "Face used for the filename part of the mode-line buffer path."
;  :group '+doom-modeline)
;
;(defface doom-modeline-buffer-modified
;  '((t (:inherit (error bold) :background nil)))
;  "Face used for the 'unsaved' symbol in the mode-line."
;  :group '+doom-modeline)
;
;(defface doom-modeline-buffer-major-mode
;  '((t (:inherit (mode-line-emphasis bold))))
;  "Face used for the major-mode segment in the mode-line."
;  :group '+doom-modeline)
;
;(defface doom-modeline-highlight
;  '((t (:inherit mode-line-emphasis)))
;  "Face for bright segments of the mode-line."
;  :group '+doom-modeline)
;
;(defface doom-modeline-panel
;  '((t (:inherit mode-line-highlight)))
;  "Face for 'X out of Y' segments, such as `+doom-modeline--anzu', `+doom-modeline--evil-substitute' and
;`iedit'"
;  :group '+doom-modeline)
;
;(defface doom-modeline-info
;  `((t (:inherit (success bold))))
;  "Face for info-level messages in the modeline. Used by `*vc'."
;  :group '+doom-modeline)
;
;(defface doom-modeline-warning
;  `((t (:inherit (warning bold))))
;  "Face for warnings in the modeline. Used by `*flycheck'"
;  :group '+doom-modeline)
;
;(defface doom-modeline-urgent
;  `((t (:inherit (error bold))))
;  "Face for errors in the modeline. Used by `*flycheck'"
;  :group '+doom-modeline)
;
;;; Bar
;(defface doom-modeline-bar '((t (:inherit highlight)))
;  "The face used for the left-most bar on the mode-line of an active window."
;  :group '+doom-modeline)
;
;(defface doom-modeline-eldoc-bar '((t (:inherit shadow)))
;  "The face used for the left-most bar on the mode-line when eldoc-eval is
;active."
;  :group '+doom-modeline)
;
;(defface doom-modeline-inactive-bar '((t (:inherit warning :inverse-video t)))
;  "The face used for the left-most bar on the mode-line of an inactive window."
;  :group '+doom-modeline)
;
;
;;;
;;; Modeline helpers
;;;
;
;(defsubst active ()
;  (eq (selected-window) +doom-modeline-current-window))
;
;;; Inspired from `powerline's `pl/make-xpm'.
;(def-memoized! +doom-modeline--make-xpm (color height width)
;  "Create an XPM bitmap."
;  (propertize
;   " " 'display
;   (let ((data (make-list height (make-list width 1)))
;         (color (or color "None")))
;     (create-image
;      (concat
;       (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
;               (length (car data))
;               (length data)
;               color
;               color)
;       (apply #'concat
;              (cl-loop with idx = 0
;                       with len = (length data)
;                       for dl in data
;                       do (cl-incf idx)
;                       collect
;                       (concat "\""
;                               (cl-loop for d in dl
;                                        if (= d 0) collect (string-to-char " ")
;                                        else collect (string-to-char "."))
;                               (if (eq idx len) "\"};" "\",\n")))))
;      'xpm t :ascent 'center))))
;
;(defun +doom-modeline-buffer-file-name ()
;  "Propertized `buffer-file-name' based on `+doom-modeline-buffer-file-name-style'."
;  (propertize
;   (pcase +doom-modeline-buffer-file-name-style
;     ('truncate-upto-project (+doom-modeline--buffer-file-name 'shrink))
;     ('truncate-upto-root (+doom-modeline--buffer-file-name-truncate))
;     ('truncate-all (+doom-modeline--buffer-file-name-truncate t))
;     ('relative-to-project (+doom-modeline--buffer-file-name-relative))
;     ('relative-from-project (+doom-modeline--buffer-file-name-relative 'include-project))
;     ('file-name (propertize (file-name-nondirectory buffer-file-name)
;                             'face
;                             (let ((face (or (and (buffer-modified-p)
;                                                  'doom-modeline-buffer-modified)
;                                             (and (active)
;                                                  'doom-modeline-buffer-file))))
;                               (when face `(:inherit ,face))))))
;   'help-echo buffer-file-truename))
;
;(defun +doom-modeline--buffer-file-name-truncate (&optional truncate-tail)
;  "Propertized `buffer-file-name' that truncates every dir along path.
;If TRUNCATE-TAIL is t also truncate the parent directory of the file."
;  (let ((dirs (shrink-path-prompt (file-name-directory buffer-file-truename)))
;        (active (active)))
;    (if (null dirs)
;        (propertize "%b" 'face (if active 'doom-modeline-buffer-file))
;      (let ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified)))
;        (let ((dirname (car dirs))
;              (basename (cdr dirs))
;              (dir-faces (or modified-faces (if active 'doom-modeline-project-root-dir)))
;              (file-faces (or modified-faces (if active 'doom-modeline-buffer-file))))
;          (concat (propertize (concat dirname
;                                      (if truncate-tail (substring basename 0 1) basename)
;                                      "/")
;                              'face (if dir-faces `(:inherit ,dir-faces)))
;                  (propertize (file-name-nondirectory buffer-file-name)
;                              'face (if file-faces `(:inherit ,file-faces)))))))))
;
;(defun +doom-modeline--buffer-file-name-relative (&optional include-project)
;  "Propertized `buffer-file-name' showing directories relative to project's root only."
;  (let ((root (projectile-project-root))
;        (active (active)))
;    (if (null root)
;        (propertize "%b" 'face (if active 'doom-modeline-buffer-file))
;      (let* ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified))
;             (relative-dirs (file-relative-name (file-name-directory buffer-file-truename)
;                                                (if include-project (concat root "../") root)))
;             (relative-faces (or modified-faces (if active 'doom-modeline-buffer-path)))
;             (file-faces (or modified-faces (if active 'doom-modeline-buffer-file))))
;        (if (equal "./" relative-dirs) (setq relative-dirs ""))
;        (concat (propertize relative-dirs 'face (if relative-faces `(:inherit ,relative-faces)))
;                (propertize (file-name-nondirectory buffer-file-truename)
;                            'face (if file-faces `(:inherit ,file-faces))))))))
;
;(defun +doom-modeline--buffer-file-name (truncate-project-root-parent)
;  "Propertized `buffer-file-name'.
;If TRUNCATE-PROJECT-ROOT-PARENT is t space will be saved by truncating it down
;fish-shell style.
;
;Example:
;~/Projects/FOSS/emacs/lisp/comint.el => ~/P/F/emacs/lisp/comint.el"
;  (let* ((project-root (projectile-project-root))
;         (file-name-split (shrink-path-file-mixed project-root
;                                                  (file-name-directory buffer-file-truename)
;                                                  buffer-file-truename))
;         (active (active)))
;    (if (null file-name-split)
;        (propertize "%b" 'face (if active 'doom-modeline-buffer-file))
;      (pcase-let ((`(,root-path-parent ,project ,relative-path ,filename) file-name-split))
;        (let ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified)))
;          (let ((sp-faces       (or modified-faces (if active 'font-lock-comment-face)))
;                (project-faces  (or modified-faces (if active 'font-lock-string-face)))
;                (relative-faces (or modified-faces (if active 'doom-modeline-buffer-path)))
;                (file-faces     (or modified-faces (if active 'doom-modeline-buffer-file))))
;            (let ((sp-props       `(,@(if sp-faces       `(:inherit ,sp-faces))      ,@(if active '(:weight bold))))
;                  (project-props  `(,@(if project-faces  `(:inherit ,project-faces)) ,@(if active '(:weight bold))))
;                  (relative-props `(,@(if relative-faces `(:inherit ,relative-faces))))
;                  (file-props     `(,@(if file-faces     `(:inherit ,file-faces)))))
;              (concat (propertize (if truncate-project-root-parent
;                                      root-path-parent
;                                    (abbreviate-file-name project-root))
;                                  'face sp-props)
;                      (propertize (concat project "/") 'face project-props)
;                      (if relative-path (propertize relative-path 'face relative-props))
;                      (propertize filename 'face file-props)))))))))
;
;
;;;
;;; Segments
;;;
;
;(def-modeline-segment! buffer-default-directory
;  "Displays `default-directory'. This is for special buffers like the scratch
;buffer where knowing the current project directory is important."
;  (let ((face (if (active) 'doom-modeline-buffer-path)))
;    (concat (if (display-graphic-p) " ")
;            (all-the-icons-octicon
;             "file-directory"
;             :face face
;             :v-adjust -0.05
;             :height 1.25)
;            (propertize (concat " " (abbreviate-file-name default-directory))
;                        'face face))))
;
;;;
;(def-modeline-segment! buffer-info
;  "Combined information about the current buffer, including the current working
;directory, the file name, and its state (modified, read-only or non-existent)."
;  (concat (cond (buffer-read-only
;                 (concat (all-the-icons-octicon
;                          "lock"
;                          :face 'doom-modeline-warning
;                          :v-adjust -0.05)
;                         " "))
;                ((buffer-modified-p)
;                 (concat (all-the-icons-faicon
;                          "floppy-o"
;                          :face 'doom-modeline-buffer-modified
;                          :v-adjust -0.0575)
;                         " "))
;                ((and buffer-file-name
;                      (not (file-exists-p buffer-file-name)))
;                 (concat (all-the-icons-octicon
;                          "circle-slash"
;                          :face 'doom-modeline-urgent
;                          :v-adjust -0.05)
;                         " "))
;                ((buffer-narrowed-p)
;                 (concat (all-the-icons-octicon
;                          "fold"
;                          :face 'doom-modeline-warning
;                          :v-adjust -0.05)
;                         " ")))
;          (if buffer-file-name
;              (+doom-modeline-buffer-file-name)
;            "%b")))
;
;;;
;(def-modeline-segment! buffer-info-simple
;  "Display only the current buffer's name, but with fontification."
;  (propertize
;   "%b"
;   'face (cond ((and buffer-file-name (buffer-modified-p))
;                'doom-modeline-buffer-modified)
;               ((active) 'doom-modeline-buffer-file))))
;
;;;
;(def-modeline-segment! buffer-encoding
;  "Displays the encoding and eol style of the buffer the same way Atom does."
;  (concat (pcase (coding-system-eol-type buffer-file-coding-system)
;            (0 "LF  ")
;            (1 "CRLF  ")
;            (2 "CR  "))
;          (let ((sys (coding-system-plist buffer-file-coding-system)))
;            (cond ((memq (plist-get sys :category) '(coding-category-undecided coding-category-utf-8))
;                   "UTF-8")
;                  (t (upcase (symbol-name (plist-get sys :name))))))
;          "  "))
;
;;;
;(def-modeline-segment! major-mode
;  "The major mode, including process, environment and text-scale info."
;  (propertize
;   (concat (format-mode-line mode-name)
;           (when (stringp mode-line-process)
;             mode-line-process)
;           (and (featurep 'face-remap)
;                (/= text-scale-mode-amount 0)
;                (format " (%+d)" text-scale-mode-amount)))
;   'face (if (active) 'doom-modeline-buffer-major-mode)))
;
;;;
;(def-modeline-segment! vcs
;  "Displays the current branch, colored based on its state."
;  (when (and vc-mode buffer-file-name)
;    (let* ((backend (vc-backend buffer-file-name))
;           (state   (vc-state buffer-file-name backend)))
;      (let ((face    'mode-line-inactive)
;            (active  (active))
;            (all-the-icons-default-adjust -0.1))
;        (concat "  "
;                (cond ((memq state '(edited added))
;                       (if active (setq face 'doom-modeline-info))
;                       (all-the-icons-octicon
;                        "git-compare"
;                        :face face
;                        :v-adjust -0.05))
;                      ((eq state 'needs-merge)
;                       (if active (setq face 'doom-modeline-info))
;                       (all-the-icons-octicon "git-merge" :face face))
;                      ((eq state 'needs-update)
;                       (if active (setq face 'doom-modeline-warning))
;                       (all-the-icons-octicon "arrow-down" :face face))
;                      ((memq state '(removed conflict unregistered))
;                       (if active (setq face 'doom-modeline-urgent))
;                       (all-the-icons-octicon "alert" :face face))
;                      (t
;                       (if active (setq face 'font-lock-doc-face))
;                       (all-the-icons-octicon
;                        "git-compare"
;                        :face face
;                        :v-adjust -0.05)))
;                " "
;                (propertize (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))
;                            'face (if active face))
;                " ")))))
;
;;;
;(defun +doom-ml-icon (icon &optional text face voffset)
;  "Displays an octicon ICON with FACE, followed by TEXT. Uses
;`all-the-icons-octicon' to fetch the icon."
;  (concat (if vc-mode " " "  ")
;          (when icon
;            (concat
;             (all-the-icons-material icon :face face :height 1.1 :v-adjust (or voffset -0.2))
;             (if text +doom-modeline-vspc)))
;          (when text
;            (propertize text 'face face))
;          (if vc-mode "  " " ")))
;
;(def-modeline-segment! flycheck
;  "Displays color-coded flycheck error status in the current buffer with pretty
;icons."
;  (when (boundp 'flycheck-last-status-change)
;    (pcase flycheck-last-status-change
;      ('finished (if flycheck-current-errors
;                     (let-alist (flycheck-count-errors flycheck-current-errors)
;                       (let ((sum (+ (or .error 0) (or .warning 0))))
;                         (+doom-ml-icon "do_not_disturb_alt"
;                                        (number-to-string sum)
;                                        (if .error 'doom-modeline-urgent 'doom-modeline-warning)
;                                        -0.25)))
;                   (+doom-ml-icon "check" nil 'doom-modeline-info)))
;      ('running     (+doom-ml-icon "access_time" nil 'font-lock-doc-face -0.25))
;      ('no-checker  (+doom-ml-icon "sim_card_alert" "-" 'font-lock-doc-face))
;      ('errored     (+doom-ml-icon "sim_card_alert" "Error" 'doom-modeline-urgent))
;      ('interrupted (+doom-ml-icon "pause" "Interrupted" 'font-lock-doc-face)))))
;      ;; ('interrupted (+doom-ml-icon "x" "Interrupted" 'font-lock-doc-face)))))
;
;;;
;(defsubst doom-column (pos)
;  (save-excursion (goto-char pos)
;                  (current-column)))
;
;(def-modeline-segment! selection-info
;  "Information about the current selection, such as how many characters and
;lines are selected, or the NxM dimensions of a block selection."
;  (when (and (active) (or mark-active (eq evil-state 'visual)))
;    (let ((reg-beg (region-beginning))
;          (reg-end (region-end)))
;      (propertize
;       (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max)))))
;         (cond ((or (bound-and-true-p rectangle-mark-mode)
;                    (eq 'block evil-visual-selection))
;                (let ((cols (abs (- (doom-column reg-end)
;                                    (doom-column reg-beg)))))
;                  (format "%dx%dB" lines cols)))
;               ((eq 'line evil-visual-selection)
;                (format "%dL" lines))
;               ((> lines 1)
;                (format "%dC %dL" (- (1+ reg-end) reg-beg) lines))
;               (t
;                (format "%dC" (- (1+ reg-end) reg-beg)))))
;       'face 'doom-modeline-highlight))))
;
;
;;;
;(defun +doom-modeline--macro-recording ()
;  "Display current Emacs or evil macro being recorded."
;  (when (and (active) (or defining-kbd-macro executing-kbd-macro))
;    (let ((sep (propertize " " 'face 'doom-modeline-panel)))
;      (concat sep
;              (propertize (if (bound-and-true-p evil-this-macro)
;                              (char-to-string evil-this-macro)
;                            "Macro")
;                          'face 'doom-modeline-panel)
;              sep
;              (all-the-icons-octicon "triangle-right"
;                                     :face 'doom-modeline-panel
;                                     :v-adjust -0.05)
;              sep))))
;
;(defsubst +doom-modeline--anzu ()
;  "Show the match index and total number thereof. Requires `anzu', also
;`evil-anzu' if using `evil-mode' for compatibility with `evil-search'."
;  (when (and anzu--state (not iedit-mode))
;    (propertize
;     (let ((here anzu--current-position)
;           (total anzu--total-matched))
;       (cond ((eq anzu--state 'replace-query)
;              (format " %d replace " total))
;             ((eq anzu--state 'replace)
;              (format " %d/%d " here total))
;             (anzu--overflow-p
;              (format " %s+ " total))
;             (t
;              (format " %s/%d " here total))))
;     'face (if (active) 'doom-modeline-panel))))
;
;(defsubst +doom-modeline--evil-substitute ()
;  "Show number of matches for evil-ex substitutions and highlights in real time."
;  (when (and evil-mode
;             (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
;                 (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
;                 (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))
;    (propertize
;     (let ((range (if evil-ex-range
;                      (cons (car evil-ex-range) (cadr evil-ex-range))
;                    (cons (line-beginning-position) (line-end-position))))
;           (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
;       (if pattern
;           (format " %s matches " (how-many pattern (car range) (cdr range)))
;         " - "))
;     'face (if (active) 'doom-modeline-panel))))
;
;(defun doom-themes--overlay-sort (a b)
;  (< (overlay-start a) (overlay-start b)))
;
;(defsubst +doom-modeline--iedit ()
;  "Show the number of iedit regions matches + what match you're on."
;  (when (and iedit-mode iedit-occurrences-overlays)
;    (propertize
;     (let ((this-oc (or (let ((inhibit-message t))
;                          (iedit-find-current-occurrence-overlay))
;                        (progn (iedit-prev-occurrence)
;                               (iedit-find-current-occurrence-overlay))))
;           (length (length iedit-occurrences-overlays)))
;       (format " %s/%d "
;               (if this-oc
;                   (- length
;                      (length (memq this-oc (sort (append iedit-occurrences-overlays nil)
;                                                  #'doom-themes--overlay-sort)))
;                      -1)
;                 "-")
;               length))
;     'face (if (active) 'doom-modeline-panel))))
;
;(def-modeline-segment! matches
;  "Displays: 1. the currently recording macro, 2. A current/total for the
;current search term (with anzu), 3. The number of substitutions being conducted
;with `evil-ex-substitute', and/or 4. The number of active `iedit' regions."
;  (let ((meta (concat (+doom-modeline--macro-recording)
;                      (+doom-modeline--anzu)
;                      (+doom-modeline--evil-substitute)
;                      (+doom-modeline--iedit))))
;     (or (and (not (equal meta "")) meta)
;         (if buffer-file-name " %I "))))
;
;;; TODO Include other information
;(def-modeline-segment! media-info
;  "Metadata regarding the current file, such as dimensions for images."
;  (cond ((eq major-mode 'image-mode)
;         (cl-destructuring-bind (width . height)
;             (image-size (image-get-display-property) :pixels)
;           (format "  %dx%d  " width height)))))
;
;(def-modeline-segment! bar
;  "The bar regulates the height of the mode-line in GUI Emacs.
;Returns \"\" to not break --no-window-system."
;  (if (display-graphic-p)
;      (+doom-modeline--make-xpm
;       (face-background (if (active)
;                            'doom-modeline-bar
;                          'doom-modeline-inactive-bar)
;                        nil t)
;       +doom-modeline-height
;       +doom-modeline-bar-width)
;    ""))
;
;
;;;
;;; Mode lines
;;;
;
;(def-modeline! main
;  (bar matches " " buffer-info "  %l:%c %p  " selection-info)
;  (buffer-encoding major-mode vcs flycheck))
;
;(def-modeline! minimal
;  (bar matches " " buffer-info)
;  (media-info major-mode))
;
;(def-modeline! special
;  (bar matches " " buffer-info-simple "  %l:%c %p  " selection-info)
;  (buffer-encoding major-mode flycheck))
;
;(def-modeline! project
;  (bar buffer-default-directory)
;  (major-mode))
;
;(def-modeline! media
;  (bar " %b  ")
;  (media-info major-mode))
;
;
;;;
;;; Hooks
;;;
;
;(defun +doom-modeline|init ()
;  "Set the default modeline."
;  (doom-set-modeline 'main t)
;
;  ;; This scratch buffer is already created and doesn't get a modeline. For the
;  ;; love of Emacs, someone give the man a modeline!
;  (with-current-buffer "*scratch*"
;    (doom-set-modeline 'main)))
;
;(defun +doom-modeline|set-special-modeline ()
;  (doom-set-modeline 'special))
;
;(defun +doom-modeline|set-media-modeline ()
;  (doom-set-modeline 'media))
;
;(defun +doom-modeline|set-project-modeline ()
;  (doom-set-modeline 'project))
;
;
;;;
;;; Bootstrap
;;;
;
;(add-hook 'doom-init-ui-hook #'+doom-modeline|init)
;(add-hook 'doom-scratch-buffer-hook #'+doom-modeline|set-special-modeline)
;(add-hook '+doom-dashboard-mode-hook #'+doom-modeline|set-project-modeline)
;
;(add-hook 'image-mode-hook   #'+doom-modeline|set-media-modeline)
;(add-hook 'org-src-mode-hook #'+doom-modeline|set-special-modeline)
;(add-hook 'circe-mode-hook   #'+doom-modeline|set-special-modeline)
#+END_SRC
