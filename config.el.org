* Packages
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC
  
** aggressive-indent
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'css-mode-hook #'aggressive-indent-mode)

;;activate for programming modes
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode) 
#+END_SRC
   
** anzu
#+BEGIN_SRC emacs-lisp
(global-anzu-mode +1)
#+END_SRC

** auto-complete 
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :config
  (ac-config-default)
  (global-auto-complete-mode)) 
#+END_SRC
   
** dashboard

#+BEGIN_SRC emacs-lisp
;(use-package dashboard
;    :config
;    (dashboard-setup-startup-hook))
#+END_SRC

** avy 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'avy-goto-char)
#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  ;; Make Evil's point behave more like Emacs'
  (setq evil-want-change-word-to-end nil)
  (setq evil-move-cursor-back nil)
  (evil-mode))
 #+END_SRC
   
** evil commentary
#+BEGIN_SRC emacs-lisp
(evil-commentary-mode)
#+END_SRC
   
** evil surround
Usage (spaces for clarity): c s [object to change from - e.g. ')'] [object to change to - e.g. '}']
E.g. cs)]
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** exwm
#+BEGIN_SRC emacs-lisp
(use-package exwm
:ensure t
:config
(require 'exwm-config)


  ;; Set the initial workspace number.
  (setq exwm-workspace-number 0)
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))

  ;; Don't use evil-mode in exwm buffers
  (add-to-list 'evil-emacs-state-modes 'exwm-mode)

  ;; 's-w': Switch workspace
  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
  ;; 's-N': Switch to certain workspace
  (dotimes (i 10)
    (exwm-input-set-key (kbd (format "s-%d" i))
                        `(lambda ()
                           (interactive)
                           (exwm-workspace-switch-create ,i))))
  ;; 's-r': Launch application
  (exwm-input-set-key (kbd "s-r")
                      (lambda (command)
                        (interactive (list (read-shell-command "$ ")))
                        (start-process-shell-command command nil command)))

  ;; Better window management
  (exwm-input-set-key (kbd "s-h") 'windmove-left)
  (exwm-input-set-key (kbd "s-j") 'windmove-down)
  (exwm-input-set-key (kbd "s-k") 'windmove-up)
  (exwm-input-set-key (kbd "s-l") 'windmove-right)

  (exwm-input-set-key (kbd "s-s") 'split-window-right)
  (exwm-input-set-key (kbd "s-v") 'split-window-vertically)

  (advice-add 'split-window-right :after 'windmove-right)
  (advice-add 'split-window-vertically :after 'windmove-down)

  (exwm-input-set-key (kbd "s-d") 'delete-window)
  (exwm-input-set-key (kbd "s-q") '(lambda ()
                                     (interactive)
                                     (kill-buffer (current-buffer))))

  ;; Save my hands
  (exwm-input-set-key (kbd "s-f") 'find-file)
  (exwm-input-set-key (kbd "s-b") 'ido-switch-buffer)

  (exwm-input-set-key (kbd "s-w") 'save-buffer)

  ;; Swap between qwerty and Dvorak with the same keyboard key
  (exwm-input-set-key (kbd "s-;") '(lambda ()
                                     (interactive)
                                     (start-process-shell-command "aoeu" nil "aoeu")
                                     (message "Qwerty")))
  (exwm-input-set-key (kbd "s-z") '(lambda ()
                                     (interactive)
                                     (start-process-shell-command "asdf" nil "asdf")
                                     (message "Dvorak")))

  ;; Line-editing shortcuts
  (exwm-input-set-simulation-keys
   '(([?\C-b] . left)
     ([?\C-f] . right)
     ([?\M-f] . C-right)
     ([?\M-b] . C-left)
     ([?\C-y] . S-insert)
     ([?\C-p] . up)
     ([?\C-n] . down)
     ([?\C-a] . home)
     ([?\C-e] . end)
     ([?\M-v] . prior)
     ([?\C-v] . next)
     ([?\C-d] . delete)
     ([?\C-k] . (S-end delete))))
  ;; Configure Ido
  (exwm-config-ido)
  ;; Other configurations
  (exwm-config-misc)

  ;; Allow switching buffers between workspaces
  (setq exwm-workspace-show-all-buffers t)
  (setq exwm-layout-show-all-buffers t))

;; enable systemtray
(require 'exwm-systemtray)
(exwm-systemtray-enable)

#+END_SRC

** eyebrowse
#+BEGIN_SRC emacs-lisp
; (eye-browse-mode t)
#+END_SRC
   
** fancy-battery
Doesn't show battery percentage, only time remaining
#+BEGIN_SRC emacs-lisp
;(add-hook 'after-init-hook #'fancy-battery-mode)
#+END_SRC

** guide-key
#+BEGIN_SRC emacs-lisp
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
(guide-key-mode 1)  ; Enable guide-key-mode
#+END_SRC
   
** helm
Bound SPC f to helm-find-files, and SPC r to helm-recentf - spacemacs style!
#+BEGIN_SRC emacs-lisp
(use-package helm
:bind (:map evil-normal-state-map
;using ido instead for find-files
("SPC f" . ido-find-file) ;; this should be in the ido section
))
;("SPC r" . helm-recentf)))
(require 'helm-config)
#+END_SRC

** hlinum-mode
Doesn't work   
#+BEGIN_SRC emacs-lisp
;(require 'hlinum)
;(hlinum-activate)
#+END_SRC
   
** ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
;("SPC f" . ido-find-file)
#+END_SRC

** ido vertical   
#+BEGIN_SRC emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** intero
#+BEGIN_SRC emacs-lisp
(package-install 'intero)
(add-hook 'haskell-mode-hook 'intero-mode)
#+END_SRC

** multiple cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
;;for when there is an active region that goes across multiple lines, the below adds a cursor to every line
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;;when I want to add multiple cursors that are not on continuous lines, but rather based on keywords in the buffer
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :ensure t
 :init
 (setq org-bullets-bullet-list
  '("◉" "◎" "￼" "○" "►" "◇"))
 :config
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
   
** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (add-hook 'evil-cleverparens-mode-hook #'enable-paredit-mode))
(add-hook 'prog-mode-hook #'paredit-mode)
#+END_SRC
   
** powerline-evil
#+BEGIN_SRC emacs-lisp
;(require 'powerline-evil)
#+END_SRC
   
** rainbow-delimeters
#+BEGIN_SRC emacs-lisp
;;start the mode automatically in most programming modes (requires Emacs 24+)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
;;M-x smartparens-mode to toggle
;;M-x sp-cheat-sheet shows available commands + usage examples
(require 'smartparens-config)
#+END_SRC

** smex
   M-x autocompletion using Ido
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :bind
  (("M-x" . smex)))
#+END_SRC
   
** smart-mode-line
#+BEGIN_SRC emacs-lisp
;(sml/setup)
#+END_SRC

** solaire mode
#+BEGIN_SRC emacs-lisp
(require 'solaire-mode)

;; brighten buffers (that represent real files)
(add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
;; To enable solaire-mode unconditionally for certain modes:
(add-hook 'ediff-prepare-buffer-hook #'solaire-mode)

;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
;; itself off every time Emacs reverts the file
(add-hook 'after-revert-hook #'turn-on-solaire-mode)

;; highlight the minibuffer when it is activated:
(add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)

;; if the bright and dark background colors are the wrong way around, use this
;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
;; This should be used *after* you load the active theme!
;;
;; NOTE: This is necessary for themes in the doom-themes package!
(solaire-mode-swap-bg)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** wttrin.el (weather package)
#+BEGIN_SRC emacs-lisp
;; weather from wttr.in
(use-package wttrin
  :ensure t
  :commands (wttrin)
  :init
  (setq wttrin-default-accept-language '("Accept-Language" . "en-GB"))
  (setq wttrin-default-cities '("Nottingham"
                                "London")))
#+END_SRC

* Productivity
** company 
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** flyspell for comments in source code
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook
          (lambda ()
            (flyspell-prog-mode)
            ; ...
          ))
#+END_SRC
   
** ido recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to find a recent file."
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(global-nlinum-relative-mode)
#+END_SRC

** Quickly access (this) config file (not yet functioning)
#+BEGIN_SRC emacs-lisp
;(defun find-user-init-file ()
;  "Edit the `user-init-file', in another window."
;  (interactive)
;  (find-file-other-window user-init-file))
;(global-set-key (kbd "C-c I") 'find-user-init-file)

;;(defun init-file ()
;;(if (eq system-type 'windows-nt)
#+END_SRC

** Time in modeline
#+BEGIN_SRC emacs-lisp
;display-time-mode 1)
#+END_SRC
   
** warn before closing emacs
   Definitely deserving its place under productivity. Why would I want to close emacs?!
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** 'yes' or 'no' -> 'y' or 'n'
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Miscellaneous 
** attempt to autocomplete with tab
#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** disable menubars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** disable scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
   
** font
#+BEGIN_SRC emacs-lisp
 '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :family "Source Code Pro for Powerline"))))
#+END_SRC

** for emacsclient
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

** hide modeline
#+BEGIN_SRC emacs-lisp
(defvar-local hidden-mode-line-mode nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

;; If you want to hide the mode-line in every buffer by default
(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
#+END_SRC


** Match parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC

** ranger, not dired
#+BEGIN_SRC emacs-lisp
(ranger-override-dired-mode t)
#+END_SRC

** recent files
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

** recents
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC
